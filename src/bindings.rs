#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(improper_ctypes)]
#![allow(missing_docs)]

// Reuse the libxml bindings
pub use libxml::bindings::*;

/* automatically generated by rust-bindgen */

extern "C" {
    #[link_name = "\u{1}xsltMaxDepth"]
    pub static mut xsltMaxDepth: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}xsltMaxVars"]
    pub static mut xsltMaxVars: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}xsltEngineVersion"]
    pub static mut xsltEngineVersion: *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}xsltLibxsltVersion"]
    pub static mut xsltLibxsltVersion: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}xsltLibxmlVersion"]
    pub static mut xsltLibxmlVersion: ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltInit();
}
extern "C" {
    pub fn xsltCleanupGlobals();
}
pub type xsltLocale = *mut ::std::os::raw::c_void;
pub type xsltLocaleChar = xmlChar;
extern "C" {
    pub fn xsltNewLocale(langName: *const xmlChar) -> xsltLocale;
}
extern "C" {
    pub fn xsltFreeLocale(locale: xsltLocale);
}
extern "C" {
    pub fn xsltStrxfrm(locale: xsltLocale, string: *const xmlChar) -> *mut xsltLocaleChar;
}
extern "C" {
    pub fn xsltLocaleStrcmp(
        locale: xsltLocale,
        str1: *const xsltLocaleChar,
        str2: *const xsltLocaleChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltFreeLocales();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltCompMatch {
    _unused: [u8; 0],
}
pub type xsltNumberData = _xsltNumberData;
pub type xsltNumberDataPtr = *mut xsltNumberData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltNumberData {
    pub level: *const xmlChar,
    pub count: *const xmlChar,
    pub from: *const xmlChar,
    pub value: *const xmlChar,
    pub format: *const xmlChar,
    pub has_format: ::std::os::raw::c_int,
    pub digitsPerGroup: ::std::os::raw::c_int,
    pub groupingCharacter: ::std::os::raw::c_int,
    pub groupingCharacterLen: ::std::os::raw::c_int,
    pub doc: xmlDocPtr,
    pub node: xmlNodePtr,
    pub countPat: *mut _xsltCompMatch,
    pub fromPat: *mut _xsltCompMatch,
}
#[test]
fn bindgen_test_layout__xsltNumberData() {
    assert_eq!(
        ::std::mem::size_of::<_xsltNumberData>(),
        88usize,
        concat!("Size of: ", stringify!(_xsltNumberData))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltNumberData>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltNumberData))
    );
    // assert_eq!(
    //   unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).level as *const _ as usize },
    //   0usize,
    //   concat!(
    //     "Offset of field: ",
    //     stringify!(_xsltNumberData),
    //     "::",
    //     stringify!(level)
    //   )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).count as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(count)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).from as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(from)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).value as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(value)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).format as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(format)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).has_format as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(has_format)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).digitsPerGroup as *const _ as usize },
    //     44usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(digitsPerGroup)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltNumberData>())).groupingCharacter as *const _ as usize
    //     },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(groupingCharacter)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltNumberData>())).groupingCharacterLen as *const _ as usize
    //     },
    //     52usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(groupingCharacterLen)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).doc as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltNumberData),
    //         "::",
    //         stringify!(doc)
    //     )
    // );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).node as *const _ as usize },
    //         64usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_xsltNumberData),
    //             "::",
    //             stringify!(node)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).countPat as *const _ as usize },
    //         72usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_xsltNumberData),
    //             "::",
    //             stringify!(countPat)
    //         )
    //     );
    //     assert_eq!(
    //         unsafe { &(*(::std::ptr::null::<_xsltNumberData>())).fromPat as *const _ as usize },
    //         80usize,
    //         concat!(
    //             "Offset of field: ",
    //             stringify!(_xsltNumberData),
    //             "::",
    //             stringify!(fromPat)
    //         )
    //     );
}
pub type xsltFormatNumberInfo = _xsltFormatNumberInfo;
pub type xsltFormatNumberInfoPtr = *mut xsltFormatNumberInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltFormatNumberInfo {
    pub integer_hash: ::std::os::raw::c_int,
    pub integer_digits: ::std::os::raw::c_int,
    pub frac_digits: ::std::os::raw::c_int,
    pub frac_hash: ::std::os::raw::c_int,
    pub group: ::std::os::raw::c_int,
    pub multiplier: ::std::os::raw::c_int,
    pub add_decimal: ::std::os::raw::c_char,
    pub is_multiplier_set: ::std::os::raw::c_char,
    pub is_negative_pattern: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__xsltFormatNumberInfo() {
    assert_eq!(
        ::std::mem::size_of::<_xsltFormatNumberInfo>(),
        28usize,
        concat!("Size of: ", stringify!(_xsltFormatNumberInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltFormatNumberInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(_xsltFormatNumberInfo))
    );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).integer_hash as *const _ as usize
    //     },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(integer_hash)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).integer_digits as *const _ as usize
    //     },
    //     4usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(integer_digits)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).frac_digits as *const _ as usize
    //     },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(frac_digits)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).frac_hash as *const _ as usize },
    //     12usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(frac_hash)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).group as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(group)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).multiplier as *const _ as usize
    //     },
    //     20usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(multiplier)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).add_decimal as *const _ as usize
    //     },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(add_decimal)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).is_multiplier_set as *const _ as usize
    //     },
    //     25usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(is_multiplier_set)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltFormatNumberInfo>())).is_negative_pattern as *const _
    //             as usize
    //     },
    //     26usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltFormatNumberInfo),
    //         "::",
    //         stringify!(is_negative_pattern)
    //     )
    // );
}
pub type xsltRuntimeExtra = _xsltRuntimeExtra;
pub type xsltRuntimeExtraPtr = *mut xsltRuntimeExtra;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xsltRuntimeExtra {
    pub info: *mut ::std::os::raw::c_void,
    pub deallocate: xmlFreeFunc,
    pub val: _xsltRuntimeExtra__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _xsltRuntimeExtra__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_void,
    pub ival: ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__xsltRuntimeExtra__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xsltRuntimeExtra__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_xsltRuntimeExtra__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltRuntimeExtra__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltRuntimeExtra__bindgen_ty_1))
    );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltRuntimeExtra__bindgen_ty_1>())).ptr as *const _ as usize
    //     },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltRuntimeExtra__bindgen_ty_1),
    //         "::",
    //         stringify!(ptr)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltRuntimeExtra__bindgen_ty_1>())).ival as *const _ as usize
    //     },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltRuntimeExtra__bindgen_ty_1),
    //         "::",
    //         stringify!(ival)
    //     )
    // );
}
#[test]
fn bindgen_test_layout__xsltRuntimeExtra() {
    assert_eq!(
        ::std::mem::size_of::<_xsltRuntimeExtra>(),
        24usize,
        concat!("Size of: ", stringify!(_xsltRuntimeExtra))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltRuntimeExtra>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltRuntimeExtra))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltRuntimeExtra>())).info as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltRuntimeExtra),
    //         "::",
    //         stringify!(info)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltRuntimeExtra>())).deallocate as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltRuntimeExtra),
    //         "::",
    //         stringify!(deallocate)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltRuntimeExtra>())).val as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltRuntimeExtra),
    //         "::",
    //         stringify!(val)
    //     )
    // );
}
pub type xsltTemplate = _xsltTemplate;
pub type xsltTemplatePtr = *mut xsltTemplate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltTemplate {
    pub next: *mut _xsltTemplate,
    pub style: *mut _xsltStylesheet,
    pub match_: *mut xmlChar,
    pub priority: f32,
    pub name: *const xmlChar,
    pub nameURI: *const xmlChar,
    pub mode: *const xmlChar,
    pub modeURI: *const xmlChar,
    pub content: xmlNodePtr,
    pub elem: xmlNodePtr,
    pub inheritedNsNr: ::std::os::raw::c_int,
    pub inheritedNs: *mut xmlNsPtr,
    pub nbCalls: ::std::os::raw::c_int,
    pub time: ::std::os::raw::c_ulong,
    pub params: *mut ::std::os::raw::c_void,
    pub templNr: ::std::os::raw::c_int,
    pub templMax: ::std::os::raw::c_int,
    pub templCalledTab: *mut xsltTemplatePtr,
    pub templCountTab: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__xsltTemplate() {
    assert_eq!(
        ::std::mem::size_of::<_xsltTemplate>(),
        144usize,
        concat!("Size of: ", stringify!(_xsltTemplate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltTemplate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltTemplate))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).style as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(style)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).match_ as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(match_)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).priority as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(priority)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).name as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(name)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).nameURI as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(nameURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).mode as *const _ as usize },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(mode)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).modeURI as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(modeURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).content as *const _ as usize },
    //     64usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(content)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).elem as *const _ as usize },
    //     72usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(elem)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).inheritedNsNr as *const _ as usize },
    //     80usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(inheritedNsNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).inheritedNs as *const _ as usize },
    //     88usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(inheritedNs)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).nbCalls as *const _ as usize },
    //     96usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(nbCalls)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).time as *const _ as usize },
    //     104usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(time)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).params as *const _ as usize },
    //     112usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(params)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).templNr as *const _ as usize },
    //     120usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(templNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).templMax as *const _ as usize },
    //     124usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(templMax)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).templCalledTab as *const _ as usize },
    //     128usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(templCalledTab)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTemplate>())).templCountTab as *const _ as usize },
    //     136usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTemplate),
    //         "::",
    //         stringify!(templCountTab)
    //     )
    // );
}
pub type xsltDecimalFormat = _xsltDecimalFormat;
pub type xsltDecimalFormatPtr = *mut xsltDecimalFormat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltDecimalFormat {
    pub next: *mut _xsltDecimalFormat,
    pub name: *mut xmlChar,
    pub digit: *mut xmlChar,
    pub patternSeparator: *mut xmlChar,
    pub minusSign: *mut xmlChar,
    pub infinity: *mut xmlChar,
    pub noNumber: *mut xmlChar,
    pub decimalPoint: *mut xmlChar,
    pub grouping: *mut xmlChar,
    pub percent: *mut xmlChar,
    pub permille: *mut xmlChar,
    pub zeroDigit: *mut xmlChar,
}
#[test]
fn bindgen_test_layout__xsltDecimalFormat() {
    assert_eq!(
        ::std::mem::size_of::<_xsltDecimalFormat>(),
        96usize,
        concat!("Size of: ", stringify!(_xsltDecimalFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltDecimalFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltDecimalFormat))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).name as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(name)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).digit as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(digit)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltDecimalFormat>())).patternSeparator as *const _ as usize
    //     },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(patternSeparator)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).minusSign as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(minusSign)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).infinity as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(infinity)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).noNumber as *const _ as usize },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(noNumber)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).decimalPoint as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(decimalPoint)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).grouping as *const _ as usize },
    //     64usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(grouping)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).percent as *const _ as usize },
    //     72usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(percent)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).permille as *const _ as usize },
    //     80usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(permille)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDecimalFormat>())).zeroDigit as *const _ as usize },
    //     88usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDecimalFormat),
    //         "::",
    //         stringify!(zeroDigit)
    //     )
    // );
}
pub type xsltDocument = _xsltDocument;
pub type xsltDocumentPtr = *mut xsltDocument;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltDocument {
    pub next: *mut _xsltDocument,
    pub main: ::std::os::raw::c_int,
    pub doc: xmlDocPtr,
    pub keys: *mut ::std::os::raw::c_void,
    pub includes: *mut _xsltDocument,
    pub preproc: ::std::os::raw::c_int,
    pub nbKeysComputed: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__xsltDocument() {
    assert_eq!(
        ::std::mem::size_of::<_xsltDocument>(),
        48usize,
        concat!("Size of: ", stringify!(_xsltDocument))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltDocument>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltDocument))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDocument>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDocument),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDocument>())).main as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDocument),
    //         "::",
    //         stringify!(main)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDocument>())).doc as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDocument),
    //         "::",
    //         stringify!(doc)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDocument>())).keys as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDocument),
    //         "::",
    //         stringify!(keys)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDocument>())).includes as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDocument),
    //         "::",
    //         stringify!(includes)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDocument>())).preproc as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDocument),
    //         "::",
    //         stringify!(preproc)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltDocument>())).nbKeysComputed as *const _ as usize },
    //     44usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltDocument),
    //         "::",
    //         stringify!(nbKeysComputed)
    //     )
    // );
}
pub type xsltKeyDef = _xsltKeyDef;
pub type xsltKeyDefPtr = *mut xsltKeyDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltKeyDef {
    pub next: *mut _xsltKeyDef,
    pub inst: xmlNodePtr,
    pub name: *mut xmlChar,
    pub nameURI: *mut xmlChar,
    pub match_: *mut xmlChar,
    pub use_: *mut xmlChar,
    pub comp: xmlXPathCompExprPtr,
    pub usecomp: xmlXPathCompExprPtr,
    pub nsList: *mut xmlNsPtr,
    pub nsNr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__xsltKeyDef() {
    assert_eq!(
        ::std::mem::size_of::<_xsltKeyDef>(),
        80usize,
        concat!("Size of: ", stringify!(_xsltKeyDef))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltKeyDef>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltKeyDef))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).inst as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(inst)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).name as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(name)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).nameURI as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(nameURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).match_ as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(match_)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).use_ as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(use_)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).comp as *const _ as usize },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(comp)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).usecomp as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(usecomp)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).nsList as *const _ as usize },
    //     64usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(nsList)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyDef>())).nsNr as *const _ as usize },
    //     72usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyDef),
    //         "::",
    //         stringify!(nsNr)
    //     )
    // );
}
pub type xsltKeyTable = _xsltKeyTable;
pub type xsltKeyTablePtr = *mut xsltKeyTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltKeyTable {
    pub next: *mut _xsltKeyTable,
    pub name: *mut xmlChar,
    pub nameURI: *mut xmlChar,
    pub keys: xmlHashTablePtr,
}
#[test]
fn bindgen_test_layout__xsltKeyTable() {
    assert_eq!(
        ::std::mem::size_of::<_xsltKeyTable>(),
        32usize,
        concat!("Size of: ", stringify!(_xsltKeyTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltKeyTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltKeyTable))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyTable>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyTable),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyTable>())).name as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyTable),
    //         "::",
    //         stringify!(name)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyTable>())).nameURI as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyTable),
    //         "::",
    //         stringify!(nameURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltKeyTable>())).keys as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltKeyTable),
    //         "::",
    //         stringify!(keys)
    //     )
    // );
}
pub type xsltStylesheet = _xsltStylesheet;
pub type xsltStylesheetPtr = *mut xsltStylesheet;
pub type xsltTransformContext = _xsltTransformContext;
pub type xsltTransformContextPtr = *mut xsltTransformContext;
pub type xsltElemPreComp = _xsltElemPreComp;
pub type xsltElemPreCompPtr = *mut xsltElemPreComp;
pub type xsltTransformFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltElemPreCompPtr,
    ),
>;
pub type xsltSortFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctxt: xsltTransformContextPtr,
        sorts: *mut xmlNodePtr,
        nbsorts: ::std::os::raw::c_int,
    ),
>;
pub const xsltStyleType_XSLT_FUNC_COPY: xsltStyleType = 1;
pub const xsltStyleType_XSLT_FUNC_SORT: xsltStyleType = 2;
pub const xsltStyleType_XSLT_FUNC_TEXT: xsltStyleType = 3;
pub const xsltStyleType_XSLT_FUNC_ELEMENT: xsltStyleType = 4;
pub const xsltStyleType_XSLT_FUNC_ATTRIBUTE: xsltStyleType = 5;
pub const xsltStyleType_XSLT_FUNC_COMMENT: xsltStyleType = 6;
pub const xsltStyleType_XSLT_FUNC_PI: xsltStyleType = 7;
pub const xsltStyleType_XSLT_FUNC_COPYOF: xsltStyleType = 8;
pub const xsltStyleType_XSLT_FUNC_VALUEOF: xsltStyleType = 9;
pub const xsltStyleType_XSLT_FUNC_NUMBER: xsltStyleType = 10;
pub const xsltStyleType_XSLT_FUNC_APPLYIMPORTS: xsltStyleType = 11;
pub const xsltStyleType_XSLT_FUNC_CALLTEMPLATE: xsltStyleType = 12;
pub const xsltStyleType_XSLT_FUNC_APPLYTEMPLATES: xsltStyleType = 13;
pub const xsltStyleType_XSLT_FUNC_CHOOSE: xsltStyleType = 14;
pub const xsltStyleType_XSLT_FUNC_IF: xsltStyleType = 15;
pub const xsltStyleType_XSLT_FUNC_FOREACH: xsltStyleType = 16;
pub const xsltStyleType_XSLT_FUNC_DOCUMENT: xsltStyleType = 17;
pub const xsltStyleType_XSLT_FUNC_WITHPARAM: xsltStyleType = 18;
pub const xsltStyleType_XSLT_FUNC_PARAM: xsltStyleType = 19;
pub const xsltStyleType_XSLT_FUNC_VARIABLE: xsltStyleType = 20;
pub const xsltStyleType_XSLT_FUNC_WHEN: xsltStyleType = 21;
pub const xsltStyleType_XSLT_FUNC_EXTENSION: xsltStyleType = 22;
pub type xsltStyleType = u32;
pub type xsltElemPreCompDeallocator =
    ::std::option::Option<unsafe extern "C" fn(comp: xsltElemPreCompPtr)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltElemPreComp {
    pub next: xsltElemPreCompPtr,
    pub type_: xsltStyleType,
    pub func: xsltTransformFunction,
    pub inst: xmlNodePtr,
    pub free: xsltElemPreCompDeallocator,
}
#[test]
fn bindgen_test_layout__xsltElemPreComp() {
    assert_eq!(
        ::std::mem::size_of::<_xsltElemPreComp>(),
        40usize,
        concat!("Size of: ", stringify!(_xsltElemPreComp))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltElemPreComp>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltElemPreComp))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltElemPreComp>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltElemPreComp),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltElemPreComp>())).type_ as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltElemPreComp),
    //         "::",
    //         stringify!(type_)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltElemPreComp>())).func as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltElemPreComp),
    //         "::",
    //         stringify!(func)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltElemPreComp>())).inst as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltElemPreComp),
    //         "::",
    //         stringify!(inst)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltElemPreComp>())).free as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltElemPreComp),
    //         "::",
    //         stringify!(free)
    //     )
    // );
}
pub type xsltStylePreComp = _xsltStylePreComp;
pub type xsltStylePreCompPtr = *mut xsltStylePreComp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltStylePreComp {
    pub next: xsltElemPreCompPtr,
    pub type_: xsltStyleType,
    pub func: xsltTransformFunction,
    pub inst: xmlNodePtr,
    pub stype: *const xmlChar,
    pub has_stype: ::std::os::raw::c_int,
    pub number: ::std::os::raw::c_int,
    pub order: *const xmlChar,
    pub has_order: ::std::os::raw::c_int,
    pub descending: ::std::os::raw::c_int,
    pub lang: *const xmlChar,
    pub has_lang: ::std::os::raw::c_int,
    pub locale: xsltLocale,
    pub case_order: *const xmlChar,
    pub lower_first: ::std::os::raw::c_int,
    pub use_: *const xmlChar,
    pub has_use: ::std::os::raw::c_int,
    pub noescape: ::std::os::raw::c_int,
    pub name: *const xmlChar,
    pub has_name: ::std::os::raw::c_int,
    pub ns: *const xmlChar,
    pub has_ns: ::std::os::raw::c_int,
    pub mode: *const xmlChar,
    pub modeURI: *const xmlChar,
    pub test: *const xmlChar,
    pub templ: xsltTemplatePtr,
    pub select: *const xmlChar,
    pub ver11: ::std::os::raw::c_int,
    pub filename: *const xmlChar,
    pub has_filename: ::std::os::raw::c_int,
    pub numdata: xsltNumberData,
    pub comp: xmlXPathCompExprPtr,
    pub nsList: *mut xmlNsPtr,
    pub nsNr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__xsltStylePreComp() {
    assert_eq!(
        ::std::mem::size_of::<_xsltStylePreComp>(),
        328usize,
        concat!("Size of: ", stringify!(_xsltStylePreComp))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltStylePreComp>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltStylePreComp))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).type_ as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(type_)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).func as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(func)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).inst as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(inst)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).stype as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(stype)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).has_stype as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(has_stype)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).number as *const _ as usize },
    //     44usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(number)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).order as *const _ as usize },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(order)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).has_order as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(has_order)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).descending as *const _ as usize },
    //     60usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(descending)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).lang as *const _ as usize },
    //     64usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(lang)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).has_lang as *const _ as usize },
    //     72usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(has_lang)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).locale as *const _ as usize },
    //     80usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(locale)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).case_order as *const _ as usize },
    //     88usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(case_order)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).lower_first as *const _ as usize },
    //     96usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(lower_first)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).use_ as *const _ as usize },
    //     104usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(use_)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).has_use as *const _ as usize },
    //     112usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(has_use)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).noescape as *const _ as usize },
    //     116usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(noescape)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).name as *const _ as usize },
    //     120usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(name)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).has_name as *const _ as usize },
    //     128usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(has_name)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).ns as *const _ as usize },
    //     136usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(ns)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).has_ns as *const _ as usize },
    //     144usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(has_ns)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).mode as *const _ as usize },
    //     152usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(mode)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).modeURI as *const _ as usize },
    //     160usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(modeURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).test as *const _ as usize },
    //     168usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(test)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).templ as *const _ as usize },
    //     176usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(templ)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).select as *const _ as usize },
    //     184usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(select)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).ver11 as *const _ as usize },
    //     192usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(ver11)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).filename as *const _ as usize },
    //     200usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(filename)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).has_filename as *const _ as usize },
    //     208usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(has_filename)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).numdata as *const _ as usize },
    //     216usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(numdata)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).comp as *const _ as usize },
    //     304usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(comp)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).nsList as *const _ as usize },
    //     312usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(nsList)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylePreComp>())).nsNr as *const _ as usize },
    //     320usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylePreComp),
    //         "::",
    //         stringify!(nsNr)
    //     )
    // );
}
pub type xsltStackElem = _xsltStackElem;
pub type xsltStackElemPtr = *mut xsltStackElem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltStackElem {
    pub next: *mut _xsltStackElem,
    pub comp: xsltStylePreCompPtr,
    pub computed: ::std::os::raw::c_int,
    pub name: *const xmlChar,
    pub nameURI: *const xmlChar,
    pub select: *const xmlChar,
    pub tree: xmlNodePtr,
    pub value: xmlXPathObjectPtr,
    pub fragment: xmlDocPtr,
    pub level: ::std::os::raw::c_int,
    pub context: xsltTransformContextPtr,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__xsltStackElem() {
    assert_eq!(
        ::std::mem::size_of::<_xsltStackElem>(),
        96usize,
        concat!("Size of: ", stringify!(_xsltStackElem))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltStackElem>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltStackElem))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).next as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).comp as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(comp)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).computed as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(computed)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).name as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(name)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).nameURI as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(nameURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).select as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(select)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).tree as *const _ as usize },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(tree)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).value as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(value)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).fragment as *const _ as usize },
    //     64usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(fragment)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).level as *const _ as usize },
    //     72usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(level)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).context as *const _ as usize },
    //     80usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(context)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStackElem>())).flags as *const _ as usize },
    //     88usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStackElem),
    //         "::",
    //         stringify!(flags)
    //     )
    // );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltStylesheet {
    pub parent: *mut _xsltStylesheet,
    pub next: *mut _xsltStylesheet,
    pub imports: *mut _xsltStylesheet,
    pub docList: xsltDocumentPtr,
    pub doc: xmlDocPtr,
    pub stripSpaces: xmlHashTablePtr,
    pub stripAll: ::std::os::raw::c_int,
    pub cdataSection: xmlHashTablePtr,
    pub variables: xsltStackElemPtr,
    pub templates: xsltTemplatePtr,
    pub templatesHash: *mut ::std::os::raw::c_void,
    pub rootMatch: *mut ::std::os::raw::c_void,
    pub keyMatch: *mut ::std::os::raw::c_void,
    pub elemMatch: *mut ::std::os::raw::c_void,
    pub attrMatch: *mut ::std::os::raw::c_void,
    pub parentMatch: *mut ::std::os::raw::c_void,
    pub textMatch: *mut ::std::os::raw::c_void,
    pub piMatch: *mut ::std::os::raw::c_void,
    pub commentMatch: *mut ::std::os::raw::c_void,
    pub nsAliases: xmlHashTablePtr,
    pub attributeSets: xmlHashTablePtr,
    pub nsHash: xmlHashTablePtr,
    pub nsDefs: *mut ::std::os::raw::c_void,
    pub keys: *mut ::std::os::raw::c_void,
    pub method: *mut xmlChar,
    pub methodURI: *mut xmlChar,
    pub version: *mut xmlChar,
    pub encoding: *mut xmlChar,
    pub omitXmlDeclaration: ::std::os::raw::c_int,
    pub decimalFormat: xsltDecimalFormatPtr,
    pub standalone: ::std::os::raw::c_int,
    pub doctypePublic: *mut xmlChar,
    pub doctypeSystem: *mut xmlChar,
    pub indent: ::std::os::raw::c_int,
    pub mediaType: *mut xmlChar,
    pub preComps: xsltElemPreCompPtr,
    pub warnings: ::std::os::raw::c_int,
    pub errors: ::std::os::raw::c_int,
    pub exclPrefix: *mut xmlChar,
    pub exclPrefixTab: *mut *mut xmlChar,
    pub exclPrefixNr: ::std::os::raw::c_int,
    pub exclPrefixMax: ::std::os::raw::c_int,
    pub _private: *mut ::std::os::raw::c_void,
    pub extInfos: xmlHashTablePtr,
    pub extrasNr: ::std::os::raw::c_int,
    pub includes: xsltDocumentPtr,
    pub dict: xmlDictPtr,
    pub attVTs: *mut ::std::os::raw::c_void,
    pub defaultAlias: *const xmlChar,
    pub nopreproc: ::std::os::raw::c_int,
    pub internalized: ::std::os::raw::c_int,
    pub literal_result: ::std::os::raw::c_int,
    pub principal: xsltStylesheetPtr,
    pub forwards_compatible: ::std::os::raw::c_int,
    pub namedTemplates: xmlHashTablePtr,
}
#[test]
fn bindgen_test_layout__xsltStylesheet() {
    assert_eq!(
        ::std::mem::size_of::<_xsltStylesheet>(),
        416usize,
        concat!("Size of: ", stringify!(_xsltStylesheet))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltStylesheet>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltStylesheet))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).parent as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(parent)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).next as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(next)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).imports as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(imports)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).docList as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(docList)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).doc as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(doc)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).stripSpaces as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(stripSpaces)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).stripAll as *const _ as usize },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(stripAll)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).cdataSection as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(cdataSection)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).variables as *const _ as usize },
    //     64usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(variables)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).templates as *const _ as usize },
    //     72usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(templates)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).templatesHash as *const _ as usize },
    //     80usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(templatesHash)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).rootMatch as *const _ as usize },
    //     88usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(rootMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).keyMatch as *const _ as usize },
    //     96usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(keyMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).elemMatch as *const _ as usize },
    //     104usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(elemMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).attrMatch as *const _ as usize },
    //     112usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(attrMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).parentMatch as *const _ as usize },
    //     120usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(parentMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).textMatch as *const _ as usize },
    //     128usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(textMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).piMatch as *const _ as usize },
    //     136usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(piMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).commentMatch as *const _ as usize },
    //     144usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(commentMatch)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).nsAliases as *const _ as usize },
    //     152usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(nsAliases)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).attributeSets as *const _ as usize },
    //     160usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(attributeSets)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).nsHash as *const _ as usize },
    //     168usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(nsHash)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).nsDefs as *const _ as usize },
    //     176usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(nsDefs)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).keys as *const _ as usize },
    //     184usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(keys)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).method as *const _ as usize },
    //     192usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(method)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).methodURI as *const _ as usize },
    //     200usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(methodURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).version as *const _ as usize },
    //     208usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(version)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).encoding as *const _ as usize },
    //     216usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(encoding)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltStylesheet>())).omitXmlDeclaration as *const _ as usize
    //     },
    //     224usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(omitXmlDeclaration)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).decimalFormat as *const _ as usize },
    //     232usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(decimalFormat)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).standalone as *const _ as usize },
    //     240usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(standalone)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).doctypePublic as *const _ as usize },
    //     248usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(doctypePublic)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).doctypeSystem as *const _ as usize },
    //     256usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(doctypeSystem)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).indent as *const _ as usize },
    //     264usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(indent)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).mediaType as *const _ as usize },
    //     272usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(mediaType)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).preComps as *const _ as usize },
    //     280usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(preComps)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).warnings as *const _ as usize },
    //     288usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(warnings)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).errors as *const _ as usize },
    //     292usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(errors)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).exclPrefix as *const _ as usize },
    //     296usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(exclPrefix)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).exclPrefixTab as *const _ as usize },
    //     304usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(exclPrefixTab)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).exclPrefixNr as *const _ as usize },
    //     312usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(exclPrefixNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).exclPrefixMax as *const _ as usize },
    //     316usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(exclPrefixMax)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>()))._private as *const _ as usize },
    //     320usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(_private)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).extInfos as *const _ as usize },
    //     328usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(extInfos)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).extrasNr as *const _ as usize },
    //     336usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(extrasNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).includes as *const _ as usize },
    //     344usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(includes)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).dict as *const _ as usize },
    //     352usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(dict)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).attVTs as *const _ as usize },
    //     360usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(attVTs)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).defaultAlias as *const _ as usize },
    //     368usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(defaultAlias)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).nopreproc as *const _ as usize },
    //     376usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(nopreproc)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).internalized as *const _ as usize },
    //     380usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(internalized)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).literal_result as *const _ as usize },
    //     384usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(literal_result)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).principal as *const _ as usize },
    //     392usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(principal)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltStylesheet>())).forwards_compatible as *const _ as usize
    //     },
    //     400usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(forwards_compatible)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltStylesheet>())).namedTemplates as *const _ as usize },
    //     408usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltStylesheet),
    //         "::",
    //         stringify!(namedTemplates)
    //     )
    // );
}
pub type xsltTransformCache = _xsltTransformCache;
pub type xsltTransformCachePtr = *mut xsltTransformCache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltTransformCache {
    pub RVT: xmlDocPtr,
    pub nbRVT: ::std::os::raw::c_int,
    pub stackItems: xsltStackElemPtr,
    pub nbStackItems: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__xsltTransformCache() {
    assert_eq!(
        ::std::mem::size_of::<_xsltTransformCache>(),
        32usize,
        concat!("Size of: ", stringify!(_xsltTransformCache))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltTransformCache>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltTransformCache))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformCache>())).RVT as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformCache),
    //         "::",
    //         stringify!(RVT)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformCache>())).nbRVT as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformCache),
    //         "::",
    //         stringify!(nbRVT)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformCache>())).stackItems as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformCache),
    //         "::",
    //         stringify!(stackItems)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformCache>())).nbStackItems as *const _ as usize
    //     },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformCache),
    //         "::",
    //         stringify!(nbStackItems)
    //     )
    // );
}
pub const xsltOutputType_XSLT_OUTPUT_XML: xsltOutputType = 0;
pub const xsltOutputType_XSLT_OUTPUT_HTML: xsltOutputType = 1;
pub const xsltOutputType_XSLT_OUTPUT_TEXT: xsltOutputType = 2;
pub type xsltOutputType = u32;
pub const xsltTransformState_XSLT_STATE_OK: xsltTransformState = 0;
pub const xsltTransformState_XSLT_STATE_ERROR: xsltTransformState = 1;
pub const xsltTransformState_XSLT_STATE_STOPPED: xsltTransformState = 2;
pub type xsltTransformState = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltTransformContext {
    pub style: xsltStylesheetPtr,
    pub type_: xsltOutputType,
    pub templ: xsltTemplatePtr,
    pub templNr: ::std::os::raw::c_int,
    pub templMax: ::std::os::raw::c_int,
    pub templTab: *mut xsltTemplatePtr,
    pub vars: xsltStackElemPtr,
    pub varsNr: ::std::os::raw::c_int,
    pub varsMax: ::std::os::raw::c_int,
    pub varsTab: *mut xsltStackElemPtr,
    pub varsBase: ::std::os::raw::c_int,
    pub extFunctions: xmlHashTablePtr,
    pub extElements: xmlHashTablePtr,
    pub extInfos: xmlHashTablePtr,
    pub mode: *const xmlChar,
    pub modeURI: *const xmlChar,
    pub docList: xsltDocumentPtr,
    pub document: xsltDocumentPtr,
    pub node: xmlNodePtr,
    pub nodeList: xmlNodeSetPtr,
    pub output: xmlDocPtr,
    pub insert: xmlNodePtr,
    pub xpathCtxt: xmlXPathContextPtr,
    pub state: xsltTransformState,
    pub globalVars: xmlHashTablePtr,
    pub inst: xmlNodePtr,
    pub xinclude: ::std::os::raw::c_int,
    pub outputFile: *const ::std::os::raw::c_char,
    pub profile: ::std::os::raw::c_int,
    pub prof: ::std::os::raw::c_long,
    pub profNr: ::std::os::raw::c_int,
    pub profMax: ::std::os::raw::c_int,
    pub profTab: *mut ::std::os::raw::c_long,
    pub _private: *mut ::std::os::raw::c_void,
    pub extrasNr: ::std::os::raw::c_int,
    pub extrasMax: ::std::os::raw::c_int,
    pub extras: xsltRuntimeExtraPtr,
    pub styleList: xsltDocumentPtr,
    pub sec: *mut ::std::os::raw::c_void,
    pub error: xmlGenericErrorFunc,
    pub errctx: *mut ::std::os::raw::c_void,
    pub sortfunc: xsltSortFunc,
    pub tmpRVT: xmlDocPtr,
    pub persistRVT: xmlDocPtr,
    pub ctxtflags: ::std::os::raw::c_int,
    pub lasttext: *const xmlChar,
    pub lasttsize: ::std::os::raw::c_int,
    pub lasttuse: ::std::os::raw::c_int,
    pub debugStatus: ::std::os::raw::c_int,
    pub traceCode: *mut ::std::os::raw::c_ulong,
    pub parserOptions: ::std::os::raw::c_int,
    pub dict: xmlDictPtr,
    pub tmpDoc: xmlDocPtr,
    pub internalized: ::std::os::raw::c_int,
    pub nbKeys: ::std::os::raw::c_int,
    pub hasTemplKeyPatterns: ::std::os::raw::c_int,
    pub currentTemplateRule: xsltTemplatePtr,
    pub initialContextNode: xmlNodePtr,
    pub initialContextDoc: xmlDocPtr,
    pub cache: xsltTransformCachePtr,
    pub contextVariable: *mut ::std::os::raw::c_void,
    pub localRVT: xmlDocPtr,
    pub localRVTBase: xmlDocPtr,
    pub keyInitLevel: ::std::os::raw::c_int,
    pub funcLevel: ::std::os::raw::c_int,
    pub maxTemplateDepth: ::std::os::raw::c_int,
    pub maxTemplateVars: ::std::os::raw::c_int,
    pub nextid: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__xsltTransformContext() {
    assert_eq!(
        ::std::mem::size_of::<_xsltTransformContext>(),
        480usize,
        concat!("Size of: ", stringify!(_xsltTransformContext))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsltTransformContext>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsltTransformContext))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).style as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(style)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).type_ as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(type_)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).templ as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(templ)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).templNr as *const _ as usize },
    //     24usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(templNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).templMax as *const _ as usize },
    //     28usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(templMax)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).templTab as *const _ as usize },
    //     32usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(templTab)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).vars as *const _ as usize },
    //     40usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(vars)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).varsNr as *const _ as usize },
    //     48usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(varsNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).varsMax as *const _ as usize },
    //     52usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(varsMax)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).varsTab as *const _ as usize },
    //     56usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(varsTab)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).varsBase as *const _ as usize },
    //     64usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(varsBase)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).extFunctions as *const _ as usize
    //     },
    //     72usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(extFunctions)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).extElements as *const _ as usize
    //     },
    //     80usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(extElements)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).extInfos as *const _ as usize },
    //     88usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(extInfos)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).mode as *const _ as usize },
    //     96usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(mode)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).modeURI as *const _ as usize },
    //     104usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(modeURI)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).docList as *const _ as usize },
    //     112usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(docList)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).document as *const _ as usize },
    //     120usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(document)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).node as *const _ as usize },
    //     128usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(node)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).nodeList as *const _ as usize },
    //     136usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(nodeList)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).output as *const _ as usize },
    //     144usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(output)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).insert as *const _ as usize },
    //     152usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(insert)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).xpathCtxt as *const _ as usize },
    //     160usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(xpathCtxt)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).state as *const _ as usize },
    //     168usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(state)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).globalVars as *const _ as usize
    //     },
    //     176usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(globalVars)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).inst as *const _ as usize },
    //     184usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(inst)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).xinclude as *const _ as usize },
    //     192usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(xinclude)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).outputFile as *const _ as usize
    //     },
    //     200usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(outputFile)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).profile as *const _ as usize },
    //     208usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(profile)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).prof as *const _ as usize },
    //     216usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(prof)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).profNr as *const _ as usize },
    //     224usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(profNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).profMax as *const _ as usize },
    //     228usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(profMax)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).profTab as *const _ as usize },
    //     232usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(profTab)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>()))._private as *const _ as usize },
    //     240usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(_private)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).extrasNr as *const _ as usize },
    //     248usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(extrasNr)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).extrasMax as *const _ as usize },
    //     252usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(extrasMax)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).extras as *const _ as usize },
    //     256usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(extras)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).styleList as *const _ as usize },
    //     264usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(styleList)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).sec as *const _ as usize },
    //     272usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(sec)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).error as *const _ as usize },
    //     280usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(error)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).errctx as *const _ as usize },
    //     288usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(errctx)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).sortfunc as *const _ as usize },
    //     296usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(sortfunc)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).tmpRVT as *const _ as usize },
    //     304usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(tmpRVT)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).persistRVT as *const _ as usize
    //     },
    //     312usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(persistRVT)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).ctxtflags as *const _ as usize },
    //     320usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(ctxtflags)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).lasttext as *const _ as usize },
    //     328usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(lasttext)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).lasttsize as *const _ as usize },
    //     336usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(lasttsize)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).lasttuse as *const _ as usize },
    //     340usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(lasttuse)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).debugStatus as *const _ as usize
    //     },
    //     344usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(debugStatus)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).traceCode as *const _ as usize },
    //     352usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(traceCode)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).parserOptions as *const _ as usize
    //     },
    //     360usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(parserOptions)
    //     )
    // );
    // // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).dict as *const _ as usize },
    //     368usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(dict)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).tmpDoc as *const _ as usize },
    //     376usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(tmpDoc)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).internalized as *const _ as usize
    //     },
    //     384usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(internalized)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).nbKeys as *const _ as usize },
    //     388usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(nbKeys)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).hasTemplKeyPatterns as *const _
    //             as usize
    //     },
    //     392usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(hasTemplKeyPatterns)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).currentTemplateRule as *const _
    //             as usize
    //     },
    //     400usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(currentTemplateRule)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).initialContextNode as *const _
    //             as usize
    //     },
    //     408usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(initialContextNode)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).initialContextDoc as *const _ as usize
    //     },
    //     416usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(initialContextDoc)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).cache as *const _ as usize },
    //     424usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(cache)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).contextVariable as *const _ as usize
    //     },
    //     432usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(contextVariable)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).localRVT as *const _ as usize },
    //     440usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(localRVT)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).localRVTBase as *const _ as usize
    //     },
    //     448usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(localRVTBase)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).keyInitLevel as *const _ as usize
    //     },
    //     456usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(keyInitLevel)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).funcLevel as *const _ as usize },
    //     460usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(funcLevel)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).maxTemplateDepth as *const _ as usize
    //     },
    //     464usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(maxTemplateDepth)
    //     )
    // );
    // assert_eq!(
    //     unsafe {
    //         &(*(::std::ptr::null::<_xsltTransformContext>())).maxTemplateVars as *const _ as usize
    //     },
    //     468usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(maxTemplateVars)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<_xsltTransformContext>())).nextid as *const _ as usize },
    //     472usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(_xsltTransformContext),
    //         "::",
    //         stringify!(nextid)
    //     )
    // );
}
extern "C" {
    pub fn xsltNewStylesheet() -> xsltStylesheetPtr;
}
extern "C" {
    pub fn xsltParseStylesheetFile(filename: *const xmlChar) -> xsltStylesheetPtr;
}
extern "C" {
    pub fn xsltFreeStylesheet(style: xsltStylesheetPtr);
}
extern "C" {
    pub fn xsltIsBlank(str: *mut xmlChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltFreeStackElemList(elem: xsltStackElemPtr);
}
extern "C" {
    pub fn xsltDecimalFormatGetByName(
        style: xsltStylesheetPtr,
        name: *mut xmlChar,
    ) -> xsltDecimalFormatPtr;
}
extern "C" {
    pub fn xsltParseStylesheetProcess(ret: xsltStylesheetPtr, doc: xmlDocPtr) -> xsltStylesheetPtr;
}
extern "C" {
    pub fn xsltParseStylesheetOutput(style: xsltStylesheetPtr, cur: xmlNodePtr);
}
extern "C" {
    pub fn xsltParseStylesheetDoc(doc: xmlDocPtr) -> xsltStylesheetPtr;
}
extern "C" {
    pub fn xsltParseStylesheetImportedDoc(
        doc: xmlDocPtr,
        style: xsltStylesheetPtr,
    ) -> xsltStylesheetPtr;
}
extern "C" {
    pub fn xsltLoadStylesheetPI(doc: xmlDocPtr) -> xsltStylesheetPtr;
}
extern "C" {
    pub fn xsltNumberFormat(
        ctxt: xsltTransformContextPtr,
        data: xsltNumberDataPtr,
        node: xmlNodePtr,
    );
}
extern "C" {
    pub fn xsltFormatNumberConversion(
        self_: xsltDecimalFormatPtr,
        format: *mut xmlChar,
        number: f64,
        result: *mut *mut xmlChar,
    ) -> xmlXPathError;
}
extern "C" {
    pub fn xsltParseTemplateContent(style: xsltStylesheetPtr, templ: xmlNodePtr);
}
extern "C" {
    pub fn xsltAllocateExtra(style: xsltStylesheetPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltAllocateExtraCtxt(ctxt: xsltTransformContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltCreateRVT(ctxt: xsltTransformContextPtr) -> xmlDocPtr;
}
extern "C" {
    pub fn xsltRegisterTmpRVT(
        ctxt: xsltTransformContextPtr,
        RVT: xmlDocPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRegisterLocalRVT(
        ctxt: xsltTransformContextPtr,
        RVT: xmlDocPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRegisterPersistRVT(
        ctxt: xsltTransformContextPtr,
        RVT: xmlDocPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltExtensionInstructionResultRegister(
        ctxt: xsltTransformContextPtr,
        obj: xmlXPathObjectPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltExtensionInstructionResultFinalize(
        ctxt: xsltTransformContextPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltFreeRVTs(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltReleaseRVT(ctxt: xsltTransformContextPtr, RVT: xmlDocPtr);
}
extern "C" {
    pub fn xsltCompileAttr(style: xsltStylesheetPtr, attr: xmlAttrPtr);
}
extern "C" {
    pub fn xsltEvalAVT(
        ctxt: xsltTransformContextPtr,
        avt: *mut ::std::os::raw::c_void,
        node: xmlNodePtr,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltFreeAVTList(avt: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn xsltUninit();
}
extern "C" {
    pub fn xsltInitCtxtKey(
        ctxt: xsltTransformContextPtr,
        doc: xsltDocumentPtr,
        keyd: xsltKeyDefPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltInitAllDocKeys(ctxt: xsltTransformContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltParseStylesheetImport(
        style: xsltStylesheetPtr,
        cur: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltParseStylesheetInclude(
        style: xsltStylesheetPtr,
        cur: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltNextImport(style: xsltStylesheetPtr) -> xsltStylesheetPtr;
}
extern "C" {
    pub fn xsltNeedElemSpaceHandling(ctxt: xsltTransformContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltFindElemSpaceHandling(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltFindTemplate(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        nameURI: *const xmlChar,
    ) -> xsltTemplatePtr;
}
extern "C" {
    pub fn xsltParseStylesheetAttributeSet(style: xsltStylesheetPtr, cur: xmlNodePtr);
}
extern "C" {
    pub fn xsltFreeAttributeSetsHashes(style: xsltStylesheetPtr);
}
extern "C" {
    pub fn xsltApplyAttributeSet(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        attributes: *const xmlChar,
    );
}
extern "C" {
    pub fn xsltResolveStylesheetAttributeSet(style: xsltStylesheetPtr);
}
extern "C" {
    pub fn xsltNewDocument(ctxt: xsltTransformContextPtr, doc: xmlDocPtr) -> xsltDocumentPtr;
}
extern "C" {
    pub fn xsltLoadDocument(ctxt: xsltTransformContextPtr, URI: *const xmlChar) -> xsltDocumentPtr;
}
extern "C" {
    pub fn xsltFindDocument(ctxt: xsltTransformContextPtr, doc: xmlDocPtr) -> xsltDocumentPtr;
}
extern "C" {
    pub fn xsltFreeDocuments(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltLoadStyleDocument(style: xsltStylesheetPtr, URI: *const xmlChar) -> xsltDocumentPtr;
}
extern "C" {
    pub fn xsltNewStyleDocument(style: xsltStylesheetPtr, doc: xmlDocPtr) -> xsltDocumentPtr;
}
extern "C" {
    pub fn xsltFreeStyleDocuments(style: xsltStylesheetPtr);
}
pub const xsltLoadType_XSLT_LOAD_START: xsltLoadType = 0;
pub const xsltLoadType_XSLT_LOAD_STYLESHEET: xsltLoadType = 1;
pub const xsltLoadType_XSLT_LOAD_DOCUMENT: xsltLoadType = 2;
pub type xsltLoadType = u32;
pub type xsltDocLoaderFunc = ::std::option::Option<
    unsafe extern "C" fn(
        URI: *const xmlChar,
        dict: xmlDictPtr,
        options: ::std::os::raw::c_int,
        ctxt: *mut ::std::os::raw::c_void,
        type_: xsltLoadType,
    ) -> xmlDocPtr,
>;
extern "C" {
    pub fn xsltSetLoaderFunc(f: xsltDocLoaderFunc);
}
extern "C" {
    #[link_name = "\u{1}xsltDocDefaultLoader"]
    pub static mut xsltDocDefaultLoader: xsltDocLoaderFunc;
}
extern "C" {
    pub fn xsltInitGlobals();
}
pub type xsltStyleExtInitFunction = ::std::option::Option<
    unsafe extern "C" fn(
        style: xsltStylesheetPtr,
        URI: *const xmlChar,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type xsltStyleExtShutdownFunction = ::std::option::Option<
    unsafe extern "C" fn(
        style: xsltStylesheetPtr,
        URI: *const xmlChar,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xsltExtInitFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ctxt: xsltTransformContextPtr,
        URI: *const xmlChar,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type xsltExtShutdownFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ctxt: xsltTransformContextPtr,
        URI: *const xmlChar,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn xsltRegisterExtModule(
        URI: *const xmlChar,
        initFunc: xsltExtInitFunction,
        shutdownFunc: xsltExtShutdownFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRegisterExtModuleFull(
        URI: *const xmlChar,
        initFunc: xsltExtInitFunction,
        shutdownFunc: xsltExtShutdownFunction,
        styleInitFunc: xsltStyleExtInitFunction,
        styleShutdownFunc: xsltStyleExtShutdownFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltUnregisterExtModule(URI: *const xmlChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltGetExtData(
        ctxt: xsltTransformContextPtr,
        URI: *const xmlChar,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xsltStyleGetExtData(
        style: xsltStylesheetPtr,
        URI: *const xmlChar,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xsltShutdownCtxtExts(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltShutdownExts(style: xsltStylesheetPtr);
}
extern "C" {
    pub fn xsltXPathGetTransformContext(ctxt: xmlXPathParserContextPtr) -> xsltTransformContextPtr;
}
extern "C" {
    pub fn xsltRegisterExtModuleFunction(
        name: *const xmlChar,
        URI: *const xmlChar,
        function: xmlXPathFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltExtModuleFunctionLookup(
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> xmlXPathFunction;
}
extern "C" {
    pub fn xsltUnregisterExtModuleFunction(
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
pub type xsltPreComputeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        style: xsltStylesheetPtr,
        inst: xmlNodePtr,
        function: xsltTransformFunction,
    ) -> xsltElemPreCompPtr,
>;
extern "C" {
    pub fn xsltNewElemPreComp(
        style: xsltStylesheetPtr,
        inst: xmlNodePtr,
        function: xsltTransformFunction,
    ) -> xsltElemPreCompPtr;
}
extern "C" {
    pub fn xsltInitElemPreComp(
        comp: xsltElemPreCompPtr,
        style: xsltStylesheetPtr,
        inst: xmlNodePtr,
        function: xsltTransformFunction,
        freeFunc: xsltElemPreCompDeallocator,
    );
}
extern "C" {
    pub fn xsltRegisterExtModuleElement(
        name: *const xmlChar,
        URI: *const xmlChar,
        precomp: xsltPreComputeFunction,
        transform: xsltTransformFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltExtElementLookup(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> xsltTransformFunction;
}
extern "C" {
    pub fn xsltExtModuleElementLookup(
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> xsltTransformFunction;
}
extern "C" {
    pub fn xsltExtModuleElementPreComputeLookup(
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> xsltPreComputeFunction;
}
extern "C" {
    pub fn xsltUnregisterExtModuleElement(
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
pub type xsltTopLevelFunction =
    ::std::option::Option<unsafe extern "C" fn(style: xsltStylesheetPtr, inst: xmlNodePtr)>;
extern "C" {
    pub fn xsltRegisterExtModuleTopLevel(
        name: *const xmlChar,
        URI: *const xmlChar,
        function: xsltTopLevelFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltExtModuleTopLevelLookup(
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> xsltTopLevelFunction;
}
extern "C" {
    pub fn xsltUnregisterExtModuleTopLevel(
        name: *const xmlChar,
        URI: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRegisterExtFunction(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        URI: *const xmlChar,
        function: xmlXPathFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRegisterExtElement(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        URI: *const xmlChar,
        function: xsltTransformFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRegisterExtPrefix(
        style: xsltStylesheetPtr,
        prefix: *const xmlChar,
        URI: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltCheckExtPrefix(
        style: xsltStylesheetPtr,
        URI: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltCheckExtURI(style: xsltStylesheetPtr, URI: *const xmlChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltInitCtxtExts(ctxt: xsltTransformContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltFreeCtxtExts(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltFreeExts(style: xsltStylesheetPtr);
}
extern "C" {
    pub fn xsltPreComputeExtModuleElement(
        style: xsltStylesheetPtr,
        inst: xmlNodePtr,
    ) -> xsltElemPreCompPtr;
}
extern "C" {
    pub fn xsltGetExtInfo(style: xsltStylesheetPtr, URI: *const xmlChar) -> xmlHashTablePtr;
}
extern "C" {
    pub fn xsltRegisterTestModule();
}
extern "C" {
    pub fn xsltDebugDumpExtensions(output: *mut FILE);
}
extern "C" {
    pub fn xsltFunctionNodeSet(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltDebug(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltRegisterExtras(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltRegisterAllExtras();
}
extern "C" {
    pub fn xmlXPathPopBoolean(ctxt: xmlXPathParserContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathPopNumber(ctxt: xmlXPathParserContextPtr) -> f64;
}
extern "C" {
    pub fn xmlXPathPopString(ctxt: xmlXPathParserContextPtr) -> *mut xmlChar;
}
extern "C" {
    pub fn xmlXPathPopNodeSet(ctxt: xmlXPathParserContextPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathPopExternal(ctxt: xmlXPathParserContextPtr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xmlXPathRegisterVariableLookup(
        ctxt: xmlXPathContextPtr,
        f: xmlXPathVariableLookupFunc,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xmlXPathRegisterFuncLookup(
        ctxt: xmlXPathContextPtr,
        f: xmlXPathFuncLookupFunc,
        funcCtxt: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xmlXPatherror(
        ctxt: xmlXPathParserContextPtr,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        no: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmlXPathErr(ctxt: xmlXPathParserContextPtr, error: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathDebugDumpObject(
        output: *mut FILE,
        cur: xmlXPathObjectPtr,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmlXPathDebugDumpCompExpr(
        output: *mut FILE,
        comp: xmlXPathCompExprPtr,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmlXPathNodeSetContains(cur: xmlNodeSetPtr, val: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathDifference(nodes1: xmlNodeSetPtr, nodes2: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathIntersection(nodes1: xmlNodeSetPtr, nodes2: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathDistinctSorted(nodes: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathDistinct(nodes: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathHasSameNodes(
        nodes1: xmlNodeSetPtr,
        nodes2: xmlNodeSetPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNodeLeadingSorted(nodes: xmlNodeSetPtr, node: xmlNodePtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathLeadingSorted(nodes1: xmlNodeSetPtr, nodes2: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathNodeLeading(nodes: xmlNodeSetPtr, node: xmlNodePtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathLeading(nodes1: xmlNodeSetPtr, nodes2: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathNodeTrailingSorted(nodes: xmlNodeSetPtr, node: xmlNodePtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathTrailingSorted(nodes1: xmlNodeSetPtr, nodes2: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathNodeTrailing(nodes: xmlNodeSetPtr, node: xmlNodePtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathTrailing(nodes1: xmlNodeSetPtr, nodes2: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathRegisterNs(
        ctxt: xmlXPathContextPtr,
        prefix: *const xmlChar,
        ns_uri: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNsLookup(ctxt: xmlXPathContextPtr, prefix: *const xmlChar) -> *const xmlChar;
}
extern "C" {
    pub fn xmlXPathRegisteredNsCleanup(ctxt: xmlXPathContextPtr);
}
extern "C" {
    pub fn xmlXPathRegisterFunc(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        f: xmlXPathFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathRegisterFuncNS(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
        f: xmlXPathFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathRegisterVariable(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        value: xmlXPathObjectPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathRegisterVariableNS(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
        value: xmlXPathObjectPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathFunctionLookup(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
    ) -> xmlXPathFunction;
}
extern "C" {
    pub fn xmlXPathFunctionLookupNS(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
    ) -> xmlXPathFunction;
}
extern "C" {
    pub fn xmlXPathRegisteredFuncsCleanup(ctxt: xmlXPathContextPtr);
}
extern "C" {
    pub fn xmlXPathVariableLookup(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
    ) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathVariableLookupNS(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
    ) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathRegisteredVariablesCleanup(ctxt: xmlXPathContextPtr);
}
extern "C" {
    pub fn xmlXPathNewParserContext(
        str: *const xmlChar,
        ctxt: xmlXPathContextPtr,
    ) -> xmlXPathParserContextPtr;
}
extern "C" {
    pub fn xmlXPathFreeParserContext(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn valuePop(ctxt: xmlXPathParserContextPtr) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn valuePush(
        ctxt: xmlXPathParserContextPtr,
        value: xmlXPathObjectPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNewString(val: *const xmlChar) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathNewCString(val: *const ::std::os::raw::c_char) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathWrapString(val: *mut xmlChar) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathWrapCString(val: *mut ::std::os::raw::c_char) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathNewFloat(val: f64) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathNewBoolean(val: ::std::os::raw::c_int) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathNewNodeSet(val: xmlNodePtr) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathNewValueTree(val: xmlNodePtr) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathNodeSetAdd(cur: xmlNodeSetPtr, val: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNodeSetAddUnique(cur: xmlNodeSetPtr, val: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNodeSetAddNs(
        cur: xmlNodeSetPtr,
        node: xmlNodePtr,
        ns: xmlNsPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNodeSetSort(set: xmlNodeSetPtr);
}
extern "C" {
    pub fn xmlXPathRoot(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathEvalExpr(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathParseName(ctxt: xmlXPathParserContextPtr) -> *mut xmlChar;
}
extern "C" {
    pub fn xmlXPathParseNCName(ctxt: xmlXPathParserContextPtr) -> *mut xmlChar;
}
extern "C" {
    pub fn xmlXPathStringEvalNumber(str: *const xmlChar) -> f64;
}
extern "C" {
    pub fn xmlXPathEvaluatePredicateResult(
        ctxt: xmlXPathParserContextPtr,
        res: xmlXPathObjectPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathRegisterAllFunctions(ctxt: xmlXPathContextPtr);
}
extern "C" {
    pub fn xmlXPathNodeSetMerge(val1: xmlNodeSetPtr, val2: xmlNodeSetPtr) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xmlXPathNodeSetDel(cur: xmlNodeSetPtr, val: xmlNodePtr);
}
extern "C" {
    pub fn xmlXPathNodeSetRemove(cur: xmlNodeSetPtr, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathNewNodeSetList(val: xmlNodeSetPtr) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathWrapNodeSet(val: xmlNodeSetPtr) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathWrapExternal(val: *mut ::std::os::raw::c_void) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xmlXPathEqualValues(ctxt: xmlXPathParserContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNotEqualValues(ctxt: xmlXPathParserContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathCompareValues(
        ctxt: xmlXPathParserContextPtr,
        inf: ::std::os::raw::c_int,
        strict: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathValueFlipSign(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathAddValues(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathSubValues(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathMultValues(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathDivValues(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathModValues(ctxt: xmlXPathParserContextPtr);
}
extern "C" {
    pub fn xmlXPathIsNodeType(name: *const xmlChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlXPathNextSelf(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextChild(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextDescendant(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextDescendantOrSelf(
        ctxt: xmlXPathParserContextPtr,
        cur: xmlNodePtr,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextParent(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextAncestorOrSelf(
        ctxt: xmlXPathParserContextPtr,
        cur: xmlNodePtr,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextFollowingSibling(
        ctxt: xmlXPathParserContextPtr,
        cur: xmlNodePtr,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextFollowing(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextNamespace(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextAttribute(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextPreceding(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextAncestor(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathNextPrecedingSibling(
        ctxt: xmlXPathParserContextPtr,
        cur: xmlNodePtr,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlXPathLastFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathPositionFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathCountFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathIdFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathLocalNameFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathNamespaceURIFunction(
        ctxt: xmlXPathParserContextPtr,
        nargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmlXPathStringFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathStringLengthFunction(
        ctxt: xmlXPathParserContextPtr,
        nargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmlXPathConcatFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathContainsFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathStartsWithFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathSubstringFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathSubstringBeforeFunction(
        ctxt: xmlXPathParserContextPtr,
        nargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmlXPathSubstringAfterFunction(
        ctxt: xmlXPathParserContextPtr,
        nargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xmlXPathNormalizeFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathTranslateFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathNotFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathTrueFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathFalseFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathLangFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathNumberFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathSumFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathFloorFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathCeilingFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathRoundFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathBooleanFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlXPathNodeSetFreeNs(ns: xmlNsPtr);
}
extern "C" {
    pub fn xsltXPathFunctionLookup(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
    ) -> xmlXPathFunction;
}
extern "C" {
    pub fn xsltDocumentFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltKeyFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltUnparsedEntityURIFunction(
        ctxt: xmlXPathParserContextPtr,
        nargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xsltFormatNumberFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltGenerateIdFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltSystemPropertyFunction(ctxt: xmlXPathParserContextPtr, nargs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltElementAvailableFunction(
        ctxt: xmlXPathParserContextPtr,
        nargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xsltFunctionAvailableFunction(
        ctxt: xmlXPathParserContextPtr,
        nargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xsltCleanupIds(ctxt: xsltTransformContextPtr, root: xmlNodePtr)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRegisterAllFunctions(ctxt: xmlXPathContextPtr);
}
extern "C" {
    pub fn xsltAddKey(
        style: xsltStylesheetPtr,
        name: *const xmlChar,
        nameURI: *const xmlChar,
        match_: *const xmlChar,
        use_: *const xmlChar,
        inst: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltGetKey(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        nameURI: *const xmlChar,
        value: *const xmlChar,
    ) -> xmlNodeSetPtr;
}
extern "C" {
    pub fn xsltInitCtxtKeys(ctxt: xsltTransformContextPtr, doc: xsltDocumentPtr);
}
extern "C" {
    pub fn xsltFreeKeys(style: xsltStylesheetPtr);
}
extern "C" {
    pub fn xsltFreeDocumentKeys(doc: xsltDocumentPtr);
}
extern "C" {
    pub fn xsltNamespaceAlias(style: xsltStylesheetPtr, node: xmlNodePtr);
}
extern "C" {
    pub fn xsltGetNamespace(
        ctxt: xsltTransformContextPtr,
        cur: xmlNodePtr,
        ns: xmlNsPtr,
        out: xmlNodePtr,
    ) -> xmlNsPtr;
}
extern "C" {
    pub fn xsltGetPlainNamespace(
        ctxt: xsltTransformContextPtr,
        cur: xmlNodePtr,
        ns: xmlNsPtr,
        out: xmlNodePtr,
    ) -> xmlNsPtr;
}
extern "C" {
    pub fn xsltGetSpecialNamespace(
        ctxt: xsltTransformContextPtr,
        cur: xmlNodePtr,
        URI: *const xmlChar,
        prefix: *const xmlChar,
        out: xmlNodePtr,
    ) -> xmlNsPtr;
}
extern "C" {
    pub fn xsltCopyNamespace(
        ctxt: xsltTransformContextPtr,
        elem: xmlNodePtr,
        ns: xmlNsPtr,
    ) -> xmlNsPtr;
}
extern "C" {
    pub fn xsltCopyNamespaceList(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        cur: xmlNsPtr,
    ) -> xmlNsPtr;
}
extern "C" {
    pub fn xsltFreeNamespaceAliasHashes(style: xsltStylesheetPtr);
}
pub type xsltCompMatch = _xsltCompMatch;
pub type xsltCompMatchPtr = *mut xsltCompMatch;
extern "C" {
    pub fn xsltCompilePattern(
        pattern: *const xmlChar,
        doc: xmlDocPtr,
        node: xmlNodePtr,
        style: xsltStylesheetPtr,
        runtime: xsltTransformContextPtr,
    ) -> xsltCompMatchPtr;
}
extern "C" {
    pub fn xsltFreeCompMatchList(comp: xsltCompMatchPtr);
}
extern "C" {
    pub fn xsltTestCompMatchList(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        comp: xsltCompMatchPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltNormalizeCompSteps(
        payload: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
    );
}
extern "C" {
    pub fn xsltAddTemplate(
        style: xsltStylesheetPtr,
        cur: xsltTemplatePtr,
        mode: *const xmlChar,
        modeURI: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltGetTemplate(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        style: xsltStylesheetPtr,
    ) -> xsltTemplatePtr;
}
extern "C" {
    pub fn xsltFreeTemplateHashes(style: xsltStylesheetPtr);
}
extern "C" {
    pub fn xsltCleanupTemplates(style: xsltStylesheetPtr);
}
extern "C" {
    #[link_name = "\u{1}xsltExtMarker"]
    pub static mut xsltExtMarker: *const xmlChar;
}
extern "C" {
    pub fn xsltDocumentComp(
        style: xsltStylesheetPtr,
        inst: xmlNodePtr,
        function: xsltTransformFunction,
    ) -> xsltElemPreCompPtr;
}
extern "C" {
    pub fn xsltStylePreCompute(style: xsltStylesheetPtr, inst: xmlNodePtr);
}
extern "C" {
    pub fn xsltFreeStylePreComps(style: xsltStylesheetPtr);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsltSecurityPrefs {
    _unused: [u8; 0],
}
pub type xsltSecurityPrefs = _xsltSecurityPrefs;
pub type xsltSecurityPrefsPtr = *mut xsltSecurityPrefs;
pub const xsltSecurityOption_XSLT_SECPREF_READ_FILE: xsltSecurityOption = 1;
pub const xsltSecurityOption_XSLT_SECPREF_WRITE_FILE: xsltSecurityOption = 2;
pub const xsltSecurityOption_XSLT_SECPREF_CREATE_DIRECTORY: xsltSecurityOption = 3;
pub const xsltSecurityOption_XSLT_SECPREF_READ_NETWORK: xsltSecurityOption = 4;
pub const xsltSecurityOption_XSLT_SECPREF_WRITE_NETWORK: xsltSecurityOption = 5;
pub type xsltSecurityOption = u32;
pub type xsltSecurityCheck = ::std::option::Option<
    unsafe extern "C" fn(
        sec: xsltSecurityPrefsPtr,
        ctxt: xsltTransformContextPtr,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xsltNewSecurityPrefs() -> xsltSecurityPrefsPtr;
}
extern "C" {
    pub fn xsltFreeSecurityPrefs(sec: xsltSecurityPrefsPtr);
}
extern "C" {
    pub fn xsltSetSecurityPrefs(
        sec: xsltSecurityPrefsPtr,
        option: xsltSecurityOption,
        func: xsltSecurityCheck,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltGetSecurityPrefs(
        sec: xsltSecurityPrefsPtr,
        option: xsltSecurityOption,
    ) -> xsltSecurityCheck;
}
extern "C" {
    pub fn xsltSetDefaultSecurityPrefs(sec: xsltSecurityPrefsPtr);
}
extern "C" {
    pub fn xsltGetDefaultSecurityPrefs() -> xsltSecurityPrefsPtr;
}
extern "C" {
    pub fn xsltSetCtxtSecurityPrefs(
        sec: xsltSecurityPrefsPtr,
        ctxt: xsltTransformContextPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltSecurityAllow(
        sec: xsltSecurityPrefsPtr,
        ctxt: xsltTransformContextPtr,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltSecurityForbid(
        sec: xsltSecurityPrefsPtr,
        ctxt: xsltTransformContextPtr,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltCheckWrite(
        sec: xsltSecurityPrefsPtr,
        ctxt: xsltTransformContextPtr,
        URL: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltCheckRead(
        sec: xsltSecurityPrefsPtr,
        ctxt: xsltTransformContextPtr,
        URL: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltEvalXPathPredicate(
        ctxt: xsltTransformContextPtr,
        comp: xmlXPathCompExprPtr,
        nsList: *mut xmlNsPtr,
        nsNr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltEvalTemplateString(
        ctxt: xsltTransformContextPtr,
        contextNode: xmlNodePtr,
        inst: xmlNodePtr,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltEvalAttrValueTemplate(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltEvalStaticAttrValueTemplate(
        style: xsltStylesheetPtr,
        node: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
        found: *mut ::std::os::raw::c_int,
    ) -> *const xmlChar;
}
extern "C" {
    pub fn xsltEvalXPathString(
        ctxt: xsltTransformContextPtr,
        comp: xmlXPathCompExprPtr,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltEvalXPathStringNs(
        ctxt: xsltTransformContextPtr,
        comp: xmlXPathCompExprPtr,
        nsNr: ::std::os::raw::c_int,
        nsList: *mut xmlNsPtr,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltTemplateProcess(ctxt: xsltTransformContextPtr, node: xmlNodePtr) -> *mut xmlNodePtr;
}
extern "C" {
    pub fn xsltAttrListTemplateProcess(
        ctxt: xsltTransformContextPtr,
        target: xmlNodePtr,
        cur: xmlAttrPtr,
    ) -> xmlAttrPtr;
}
extern "C" {
    pub fn xsltAttrTemplateProcess(
        ctxt: xsltTransformContextPtr,
        target: xmlNodePtr,
        attr: xmlAttrPtr,
    ) -> xmlAttrPtr;
}
extern "C" {
    pub fn xsltAttrTemplateValueProcess(
        ctxt: xsltTransformContextPtr,
        attr: *const xmlChar,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltAttrTemplateValueProcessNode(
        ctxt: xsltTransformContextPtr,
        str: *const xmlChar,
        node: xmlNodePtr,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltSetXIncludeDefault(xinclude: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltGetXIncludeDefault() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltNewTransformContext(
        style: xsltStylesheetPtr,
        doc: xmlDocPtr,
    ) -> xsltTransformContextPtr;
}
extern "C" {
    pub fn xsltFreeTransformContext(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltApplyStylesheetUser(
        style: xsltStylesheetPtr,
        doc: xmlDocPtr,
        params: *mut *const ::std::os::raw::c_char,
        output: *const ::std::os::raw::c_char,
        profile: *mut FILE,
        userCtxt: xsltTransformContextPtr,
    ) -> xmlDocPtr;
}
extern "C" {
    pub fn xsltProcessOneNode(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        params: xsltStackElemPtr,
    );
}
extern "C" {
    pub fn xsltApplyStripSpaces(ctxt: xsltTransformContextPtr, node: xmlNodePtr);
}
extern "C" {
    pub fn xsltApplyStylesheet(
        style: xsltStylesheetPtr,
        doc: xmlDocPtr,
        params: *mut *const ::std::os::raw::c_char,
    ) -> xmlDocPtr;
}
extern "C" {
    pub fn xsltProfileStylesheet(
        style: xsltStylesheetPtr,
        doc: xmlDocPtr,
        params: *mut *const ::std::os::raw::c_char,
        output: *mut FILE,
    ) -> xmlDocPtr;
}
extern "C" {
    pub fn xsltRunStylesheet(
        style: xsltStylesheetPtr,
        doc: xmlDocPtr,
        params: *mut *const ::std::os::raw::c_char,
        output: *const ::std::os::raw::c_char,
        SAX: xmlSAXHandlerPtr,
        IObuf: xmlOutputBufferPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltRunStylesheetUser(
        style: xsltStylesheetPtr,
        doc: xmlDocPtr,
        params: *mut *const ::std::os::raw::c_char,
        output: *const ::std::os::raw::c_char,
        SAX: xmlSAXHandlerPtr,
        IObuf: xmlOutputBufferPtr,
        profile: *mut FILE,
        userCtxt: xsltTransformContextPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltApplyOneTemplate(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        list: xmlNodePtr,
        templ: xsltTemplatePtr,
        params: xsltStackElemPtr,
    );
}
extern "C" {
    pub fn xsltDocumentElem(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltSort(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltCopy(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltText(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltElement(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltComment(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltAttribute(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltProcessingInstruction(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltCopyOf(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltValueOf(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltNumber(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltApplyImports(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltCallTemplate(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltApplyTemplates(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltChoose(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltIf(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltForEach(
        ctxt: xsltTransformContextPtr,
        node: xmlNodePtr,
        inst: xmlNodePtr,
        comp: xsltStylePreCompPtr,
    );
}
extern "C" {
    pub fn xsltRegisterAllElement(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltCopyTextString(
        ctxt: xsltTransformContextPtr,
        target: xmlNodePtr,
        string: *const xmlChar,
        noescape: ::std::os::raw::c_int,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xsltLocalVariablePop(
        ctxt: xsltTransformContextPtr,
        limitNr: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xsltLocalVariablePush(
        ctxt: xsltTransformContextPtr,
        variable: xsltStackElemPtr,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xslHandleDebugger(
        cur: xmlNodePtr,
        node: xmlNodePtr,
        templ: xsltTemplatePtr,
        ctxt: xsltTransformContextPtr,
    );
}
extern "C" {
    pub fn xsltEvalGlobalVariables(ctxt: xsltTransformContextPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltEvalUserParams(
        ctxt: xsltTransformContextPtr,
        params: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltQuoteUserParams(
        ctxt: xsltTransformContextPtr,
        params: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltEvalOneUserParam(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        value: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltQuoteOneUserParam(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        value: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltParseGlobalVariable(style: xsltStylesheetPtr, cur: xmlNodePtr);
}
extern "C" {
    pub fn xsltParseGlobalParam(style: xsltStylesheetPtr, cur: xmlNodePtr);
}
extern "C" {
    pub fn xsltParseStylesheetVariable(ctxt: xsltTransformContextPtr, cur: xmlNodePtr);
}
extern "C" {
    pub fn xsltParseStylesheetParam(ctxt: xsltTransformContextPtr, cur: xmlNodePtr);
}
extern "C" {
    pub fn xsltParseStylesheetCallerParam(
        ctxt: xsltTransformContextPtr,
        cur: xmlNodePtr,
    ) -> xsltStackElemPtr;
}
extern "C" {
    pub fn xsltAddStackElemList(
        ctxt: xsltTransformContextPtr,
        elems: xsltStackElemPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltFreeGlobalVariables(ctxt: xsltTransformContextPtr);
}
extern "C" {
    pub fn xsltVariableLookup(
        ctxt: xsltTransformContextPtr,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
    ) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xsltXPathVariableLookup(
        ctxt: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
    ) -> xmlXPathObjectPtr;
}
extern "C" {
    pub fn xsltGetNsProp(
        node: xmlNodePtr,
        name: *const xmlChar,
        nameSpace: *const xmlChar,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xsltGetCNsProp(
        style: xsltStylesheetPtr,
        node: xmlNodePtr,
        name: *const xmlChar,
        nameSpace: *const xmlChar,
    ) -> *const xmlChar;
}
extern "C" {
    pub fn xsltGetUTF8Char(
        utf: *const ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const xsltDebugTraceCodes_XSLT_TRACE_ALL: xsltDebugTraceCodes = -1;
pub const xsltDebugTraceCodes_XSLT_TRACE_NONE: xsltDebugTraceCodes = 0;
pub const xsltDebugTraceCodes_XSLT_TRACE_COPY_TEXT: xsltDebugTraceCodes = 1;
pub const xsltDebugTraceCodes_XSLT_TRACE_PROCESS_NODE: xsltDebugTraceCodes = 2;
pub const xsltDebugTraceCodes_XSLT_TRACE_APPLY_TEMPLATE: xsltDebugTraceCodes = 4;
pub const xsltDebugTraceCodes_XSLT_TRACE_COPY: xsltDebugTraceCodes = 8;
pub const xsltDebugTraceCodes_XSLT_TRACE_COMMENT: xsltDebugTraceCodes = 16;
pub const xsltDebugTraceCodes_XSLT_TRACE_PI: xsltDebugTraceCodes = 32;
pub const xsltDebugTraceCodes_XSLT_TRACE_COPY_OF: xsltDebugTraceCodes = 64;
pub const xsltDebugTraceCodes_XSLT_TRACE_VALUE_OF: xsltDebugTraceCodes = 128;
pub const xsltDebugTraceCodes_XSLT_TRACE_CALL_TEMPLATE: xsltDebugTraceCodes = 256;
pub const xsltDebugTraceCodes_XSLT_TRACE_APPLY_TEMPLATES: xsltDebugTraceCodes = 512;
pub const xsltDebugTraceCodes_XSLT_TRACE_CHOOSE: xsltDebugTraceCodes = 1024;
pub const xsltDebugTraceCodes_XSLT_TRACE_IF: xsltDebugTraceCodes = 2048;
pub const xsltDebugTraceCodes_XSLT_TRACE_FOR_EACH: xsltDebugTraceCodes = 4096;
pub const xsltDebugTraceCodes_XSLT_TRACE_STRIP_SPACES: xsltDebugTraceCodes = 8192;
pub const xsltDebugTraceCodes_XSLT_TRACE_TEMPLATES: xsltDebugTraceCodes = 16384;
pub const xsltDebugTraceCodes_XSLT_TRACE_KEYS: xsltDebugTraceCodes = 32768;
pub const xsltDebugTraceCodes_XSLT_TRACE_VARIABLES: xsltDebugTraceCodes = 65536;
pub type xsltDebugTraceCodes = i32;
extern "C" {
    pub fn xsltDebugSetDefaultTrace(val: xsltDebugTraceCodes);
}
extern "C" {
    pub fn xsltDebugGetDefaultTrace() -> xsltDebugTraceCodes;
}
extern "C" {
    #[link_name = "\u{1}xsltGenericError"]
    pub static mut xsltGenericError: xmlGenericErrorFunc;
}
extern "C" {
    #[link_name = "\u{1}xsltGenericErrorContext"]
    pub static mut xsltGenericErrorContext: *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}xsltGenericDebug"]
    pub static mut xsltGenericDebug: xmlGenericErrorFunc;
}
extern "C" {
    #[link_name = "\u{1}xsltGenericDebugContext"]
    pub static mut xsltGenericDebugContext: *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xsltPrintErrorContext(
        ctxt: xsltTransformContextPtr,
        style: xsltStylesheetPtr,
        node: xmlNodePtr,
    );
}
extern "C" {
    pub fn xsltMessage(ctxt: xsltTransformContextPtr, node: xmlNodePtr, inst: xmlNodePtr);
}
extern "C" {
    pub fn xsltSetGenericErrorFunc(ctx: *mut ::std::os::raw::c_void, handler: xmlGenericErrorFunc);
}
extern "C" {
    pub fn xsltSetGenericDebugFunc(ctx: *mut ::std::os::raw::c_void, handler: xmlGenericErrorFunc);
}
extern "C" {
    pub fn xsltSetTransformErrorFunc(
        ctxt: xsltTransformContextPtr,
        ctx: *mut ::std::os::raw::c_void,
        handler: xmlGenericErrorFunc,
    );
}
extern "C" {
    pub fn xsltTransformError(
        ctxt: xsltTransformContextPtr,
        style: xsltStylesheetPtr,
        node: xmlNodePtr,
        msg: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn xsltSetCtxtParseOptions(
        ctxt: xsltTransformContextPtr,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltDocumentSortFunction(list: xmlNodeSetPtr);
}
extern "C" {
    pub fn xsltSetSortFunc(handler: xsltSortFunc);
}
extern "C" {
    pub fn xsltSetCtxtSortFunc(ctxt: xsltTransformContextPtr, handler: xsltSortFunc);
}
extern "C" {
    pub fn xsltDefaultSortFunction(
        ctxt: xsltTransformContextPtr,
        sorts: *mut xmlNodePtr,
        nbsorts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xsltDoSortFunction(
        ctxt: xsltTransformContextPtr,
        sorts: *mut xmlNodePtr,
        nbsorts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xsltComputeSortResult(
        ctxt: xsltTransformContextPtr,
        sort: xmlNodePtr,
    ) -> *mut xmlXPathObjectPtr;
}
extern "C" {
    pub fn xsltSplitQName(
        dict: xmlDictPtr,
        name: *const xmlChar,
        prefix: *mut *const xmlChar,
    ) -> *const xmlChar;
}
extern "C" {
    pub fn xsltGetQNameURI(node: xmlNodePtr, name: *mut *mut xmlChar) -> *const xmlChar;
}
extern "C" {
    pub fn xsltGetQNameURI2(
        style: xsltStylesheetPtr,
        node: xmlNodePtr,
        name: *mut *const xmlChar,
    ) -> *const xmlChar;
}
extern "C" {
    pub fn xsltSaveResultTo(
        buf: xmlOutputBufferPtr,
        result: xmlDocPtr,
        style: xsltStylesheetPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltSaveResultToFilename(
        URI: *const ::std::os::raw::c_char,
        result: xmlDocPtr,
        style: xsltStylesheetPtr,
        compression: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltSaveResultToFile(
        file: *mut FILE,
        result: xmlDocPtr,
        style: xsltStylesheetPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltSaveResultToFd(
        fd: ::std::os::raw::c_int,
        result: xmlDocPtr,
        style: xsltStylesheetPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltSaveResultToString(
        doc_txt_ptr: *mut *mut xmlChar,
        doc_txt_len: *mut ::std::os::raw::c_int,
        result: xmlDocPtr,
        style: xsltStylesheetPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltXPathCompile(style: xsltStylesheetPtr, str: *const xmlChar) -> xmlXPathCompExprPtr;
}
extern "C" {
    pub fn xsltXPathCompileFlags(
        style: xsltStylesheetPtr,
        str: *const xmlChar,
        flags: ::std::os::raw::c_int,
    ) -> xmlXPathCompExprPtr;
}
extern "C" {
    pub fn xsltSaveProfiling(ctxt: xsltTransformContextPtr, output: *mut FILE);
}
extern "C" {
    pub fn xsltGetProfileInformation(ctxt: xsltTransformContextPtr) -> xmlDocPtr;
}
extern "C" {
    pub fn xsltTimestamp() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xsltCalibrateAdjust(delta: ::std::os::raw::c_long);
}
pub const xsltDebugStatusCodes_XSLT_DEBUG_NONE: xsltDebugStatusCodes = 0;
pub const xsltDebugStatusCodes_XSLT_DEBUG_INIT: xsltDebugStatusCodes = 1;
pub const xsltDebugStatusCodes_XSLT_DEBUG_STEP: xsltDebugStatusCodes = 2;
pub const xsltDebugStatusCodes_XSLT_DEBUG_STEPOUT: xsltDebugStatusCodes = 3;
pub const xsltDebugStatusCodes_XSLT_DEBUG_NEXT: xsltDebugStatusCodes = 4;
pub const xsltDebugStatusCodes_XSLT_DEBUG_STOP: xsltDebugStatusCodes = 5;
pub const xsltDebugStatusCodes_XSLT_DEBUG_CONT: xsltDebugStatusCodes = 6;
pub const xsltDebugStatusCodes_XSLT_DEBUG_RUN: xsltDebugStatusCodes = 7;
pub const xsltDebugStatusCodes_XSLT_DEBUG_RUN_RESTART: xsltDebugStatusCodes = 8;
pub const xsltDebugStatusCodes_XSLT_DEBUG_QUIT: xsltDebugStatusCodes = 9;
pub type xsltDebugStatusCodes = u32;
extern "C" {
    #[link_name = "\u{1}xslDebugStatus"]
    pub static mut xslDebugStatus: ::std::os::raw::c_int;
}
pub type xsltHandleDebuggerCallback = ::std::option::Option<
    unsafe extern "C" fn(
        cur: xmlNodePtr,
        node: xmlNodePtr,
        templ: xsltTemplatePtr,
        ctxt: xsltTransformContextPtr,
    ),
>;
pub type xsltAddCallCallback = ::std::option::Option<
    unsafe extern "C" fn(templ: xsltTemplatePtr, source: xmlNodePtr) -> ::std::os::raw::c_int,
>;
pub type xsltDropCallCallback = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn xsltSetDebuggerStatus(value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xsltGetDebuggerStatus() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsltSetDebuggerCallbacks(
        no: ::std::os::raw::c_int,
        block: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xslAddCall(templ: xsltTemplatePtr, source: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xslDropCall();
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
    //     0usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(__va_list_tag),
    //         "::",
    //         stringify!(gp_offset)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
    //     4usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(__va_list_tag),
    //         "::",
    //         stringify!(fp_offset)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
    //     8usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(__va_list_tag),
    //         "::",
    //         stringify!(overflow_arg_area)
    //     )
    // );
    // assert_eq!(
    //     unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
    //     16usize,
    //     concat!(
    //         "Offset of field: ",
    //         stringify!(__va_list_tag),
    //         "::",
    //         stringify!(reg_save_area)
    //     )
    // );
}
